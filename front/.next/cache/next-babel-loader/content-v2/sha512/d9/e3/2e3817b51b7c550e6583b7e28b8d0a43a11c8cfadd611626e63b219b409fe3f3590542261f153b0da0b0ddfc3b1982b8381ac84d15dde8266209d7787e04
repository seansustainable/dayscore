{"ast":null,"code":"import produce from '../util/produce';\nimport shortId from 'shortid';\nimport faker from 'faker'; // export const initialState = {\n//     mainPosts: [{\n//         id: 1,\n//         User: {\n//             id: 1,\n//             nickname: 'Sean',\n//         },\n//         content: 'initial post',\n//         Images: [{\n//             src: 'https://img.segye.com/content/image/2019/10/11/20191011508687.jpg',\n//         }, {\n//             src: 'https://t1.daumcdn.net/cfile/tistory/997D23485AF4613635',\n//         }, {\n//             src: 'http://menu.mt.co.kr/moneyweek/thumb/2019/12/04/06/2019120415218066596_1.jpg',\n//         }],\n//         Comments: [{\n//             User: {\n//                 nickname: 'ê¹€ì²¨ì§€',\n//             },\n//             content: 'ë¸”ëž™ ëª¨í‹°ë¸Œë¡œ ì™€~',\n//         }, {\n//             User: {\n//                 nickname: 'ë­‰',\n//             },\n//             content: 'í™§íŒ…! ðŸ˜„',\n//         }]\n//     }],\n//     imagePaths: [],\n//     postAdded: false,\n// };\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Sean'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'Sean'\n    }\n  };\n};\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // const dummyPost = {\n//     id: 2,\n//     content: 'dummy post',\n//     User: {\n//         id: 1,\n//         nickname: 'Sean',\n//     },\n//     Images: [],\n//     Comments: [],\n// };\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsError = null;\n        draft.loadPostsDone = false;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostError = null;\n        draft.addPostDone = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        draft.removePostDone = false;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentError = null;\n        draft.addCommentDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","dummyPost","data","dummyComment","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import produce from '../util/produce';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\n// export const initialState = {\n//     mainPosts: [{\n//         id: 1,\n//         User: {\n//             id: 1,\n//             nickname: 'Sean',\n//         },\n//         content: 'initial post',\n//         Images: [{\n//             src: 'https://img.segye.com/content/image/2019/10/11/20191011508687.jpg',\n//         }, {\n//             src: 'https://t1.daumcdn.net/cfile/tistory/997D23485AF4613635',\n//         }, {\n//             src: 'http://menu.mt.co.kr/moneyweek/thumb/2019/12/04/06/2019120415218066596_1.jpg',\n//         }],\n//         Comments: [{\n//             User: {\n//                 nickname: 'ê¹€ì²¨ì§€',\n//             },\n//             content: 'ë¸”ëž™ ëª¨í‹°ë¸Œë¡œ ì™€~',\n//         }, {\n//             User: {\n//                 nickname: 'ë­‰',\n//             },\n//             content: 'í™§íŒ…! ðŸ˜„',\n//         }]\n//     }],\n//     imagePaths: [],\n//     postAdded: false,\n// };\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [],\n    hasMorePosts: true,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n    id: shortId.generate(),\n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n        src: faker.image.image(),\n    }],\n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n}));\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: 'Sean',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: 'Sean',\n    },\n});\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n// const dummyPost = {\n//     id: 2,\n//     content: 'dummy post',\n//     User: {\n//         id: 1,\n//         nickname: 'Sean',\n//     },\n//     Images: [],\n//     Comments: [],\n// };\n\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n    switch (action.type) {\n        case LOAD_POSTS_REQUEST:\n            draft.loadPostsLoading = true;\n            draft.loadPostsError = null;\n            draft.loadPostsDone = false;\n            break;\n        case LOAD_POSTS_SUCCESS:\n            draft.loadPostsLoading = false;\n            draft.loadPostsDone = true;\n            draft.mainPosts = action.data.concat(draft.mainPosts);\n            draft.hasMorePosts = draft.mainPosts.length < 50;\n            break;\n        case LOAD_POSTS_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.loadPostsError = action.error;\n            break;\n        case ADD_POST_REQUEST:\n            draft.addPostLoading = true;\n            draft.addPostError = null;\n            draft.addPostDone = false;\n            break;\n        case ADD_POST_SUCCESS:\n            draft.addPostLoading = false;\n            draft.addPostDone = true;\n            draft.mainPosts.unshift(dummyPost(action.data));\n            break;\n        case ADD_POST_FAILURE:\n            draft.addPostLoading = false;\n            draft.addPostError = action.error;\n            break;\n        case REMOVE_POST_REQUEST:\n            draft.removePostLoading = true;\n            draft.removePostError = null;\n            draft.removePostDone = false;\n            break;\n        case REMOVE_POST_SUCCESS:\n            draft.removePostLoading = false;\n            draft.removePostDone = true;\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n            break;\n        case REMOVE_POST_FAILURE:\n            draft.removePostLoading = false;\n            draft.removePostError = action.error;\n            break;\n        case ADD_COMMENT_REQUEST:\n            draft.addCommentLoading = true;\n            draft.addCommentError = null;\n            draft.addCommentDone = false;\n            break;\n        case ADD_COMMENT_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n            post.Comments.unshift(dummyComment(action.data.content));\n            draft.addCommentLoading = false;\n            draft.addCommentDone = true;\n            break;\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n            // const post = { ...state.mainPosts[postIndex] };\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post;\n            // return {\n            //   ...state,\n            //   mainPosts,\n            //   addCommentLoading: false,\n            //   addCommentDone: true,\n            // };\n        }\n        case ADD_COMMENT_FAILURE:\n            draft.addCommentLoading = false;\n            draft.addCommentError = action.error;\n            break;\n        default:\n            break;\n    }\n});\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}