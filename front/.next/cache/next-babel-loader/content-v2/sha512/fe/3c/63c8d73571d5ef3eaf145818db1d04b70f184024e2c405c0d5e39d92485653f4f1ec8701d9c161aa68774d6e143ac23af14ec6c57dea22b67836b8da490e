{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { generateDummyAction, LOAD_ACTIONS_FAILURE, LOAD_ACTIONS_REQUEST, LOAD_ACTIONS_SUCCESS, ADD_ACTION_FAILURE, ADD_ACTION_REQUEST, ADD_ACTION_SUCCESS, REMOVE_ACTION_FAILURE, REMOVE_ACTION_REQUEST, REMOVE_ACTION_SUCCESS } from '../reducers/action';\nimport { ADD_ACTION_TO_ME, REMOVE_ACTION_OF_ME } from '../reducers/user';\n\nfunction loadActionsAPI(data) {\n  return axios.get('/api/actions', data);\n}\n\nfunction* loadActions(action) {\n  try {\n    // const result = yield call(loadActionsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_ACTIONS_SUCCESS,\n      data: generateDummyAction(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_ACTIONS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addActionAPI(data) {\n  return axios.post('/api/action', data);\n}\n\nfunction* addAction(action) {\n  try {\n    // const result = yield call(addActionAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_ACTION_SUCCESS,\n      data: {\n        id,\n        title: action.title,\n        description: action.description,\n        score: action.score\n      }\n    });\n    yield put({\n      type: ADD_ACTION_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_ACTION_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removeActionAPI(data) {\n  return axios.delete('/api/action', data);\n}\n\nfunction* removeAction(action) {\n  try {\n    // const result = yield call(removeActionAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_ACTION_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_ACTION_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_ACTION_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadActions() {\n  yield throttle(5000, LOAD_ACTIONS_REQUEST, loadActions);\n}\n\nfunction* watchAddAction() {\n  yield takeLatest(ADD_ACTION_REQUEST, addAction);\n}\n\nfunction* watchRemoveAction() {\n  yield takeLatest(REMOVE_ACTION_REQUEST, removeAction);\n}\n\nexport default function* actionSaga() {\n  yield all([fork(watchLoadActions), fork(watchAddAction), fork(watchRemoveAction)]);\n}","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/sagas/action.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","generateDummyAction","LOAD_ACTIONS_FAILURE","LOAD_ACTIONS_REQUEST","LOAD_ACTIONS_SUCCESS","ADD_ACTION_FAILURE","ADD_ACTION_REQUEST","ADD_ACTION_SUCCESS","REMOVE_ACTION_FAILURE","REMOVE_ACTION_REQUEST","REMOVE_ACTION_SUCCESS","ADD_ACTION_TO_ME","REMOVE_ACTION_OF_ME","loadActionsAPI","data","get","loadActions","action","type","err","console","error","response","addActionAPI","post","addAction","id","generate","title","description","score","removeActionAPI","delete","removeAction","watchLoadActions","watchAddAction","watchRemoveAction","actionSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport {\n  generateDummyAction,\n  LOAD_ACTIONS_FAILURE,\n  LOAD_ACTIONS_REQUEST,\n  LOAD_ACTIONS_SUCCESS,\n  ADD_ACTION_FAILURE,\n  ADD_ACTION_REQUEST,\n  ADD_ACTION_SUCCESS,\n  REMOVE_ACTION_FAILURE,\n  REMOVE_ACTION_REQUEST,\n  REMOVE_ACTION_SUCCESS,\n} from '../reducers/action';\nimport { ADD_ACTION_TO_ME, REMOVE_ACTION_OF_ME } from '../reducers/user';\n\nfunction loadActionsAPI(data) {\n  return axios.get('/api/actions', data);\n}\n\nfunction* loadActions(action) {\n  try {\n    // const result = yield call(loadActionsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_ACTIONS_SUCCESS,\n      data: generateDummyAction(10),\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_ACTIONS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addActionAPI(data) {\n  return axios.post('/api/action', data);\n}\n\nfunction* addAction(action) {\n  try {\n    // const result = yield call(addActionAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_ACTION_SUCCESS,\n      data: {\n        id,\n        title: action.title,\n        description: action.description,\n        score: action.score,\n      },\n    });\n    yield put({\n      type: ADD_ACTION_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_ACTION_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removeActionAPI(data) {\n  return axios.delete('/api/action', data);\n}\n\nfunction* removeAction(action) {\n  try {\n    // const result = yield call(removeActionAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_ACTION_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_ACTION_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_ACTION_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadActions() {\n  yield throttle(5000, LOAD_ACTIONS_REQUEST, loadActions);\n}\n\nfunction* watchAddAction() {\n  yield takeLatest(ADD_ACTION_REQUEST, addAction);\n}\n\nfunction* watchRemoveAction() {\n  yield takeLatest(REMOVE_ACTION_REQUEST, removeAction);\n}\n\nexport default function* actionSaga() {\n  yield all([\n    fork(watchLoadActions),\n    fork(watchAddAction),\n    fork(watchRemoveAction),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}