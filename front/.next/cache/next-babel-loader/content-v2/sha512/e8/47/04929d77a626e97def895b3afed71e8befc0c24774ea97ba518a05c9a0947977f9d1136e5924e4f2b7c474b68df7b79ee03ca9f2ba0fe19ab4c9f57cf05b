{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/sean/Projects/dayscore/front/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/sean/Projects/dayscore/front/components/CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  right: 0;\\n  bottom: -35px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Form, Button, Input } from 'antd';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nvar ButtonWrapper = styled(Button)(_templateObject());\n_c = ButtonWrapper;\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(''),\n      commentText = _useState[0],\n      setCommentText = _useState[1];\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onSubmit = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        userId: id,\n        postId: post.id\n      }\n    });\n  }, [id, commentText]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        marginTop: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        rows: 4,\n        value: commentText,\n        onChange: onChangeCommentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"\\uC791\\uC131\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommentForm, \"eV+v/f5vlyTAtdTn68X9ogBvEtI=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c2 = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonWrapper\");\n$RefreshReg$(_c2, \"CommentForm\");","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","useState","Form","Button","Input","styled","useDispatch","useSelector","PropTypes","ADD_COMMENT_REQUEST","ButtonWrapper","CommentForm","post","commentText","setCommentText","id","state","user","me","addCommentDone","addCommentLoading","dispatch","onChangeCommentText","e","target","value","onSubmit","type","data","content","userId","postId","marginTop","propTypes","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AAEA,IAAMC,aAAa,GAAGL,MAAM,CAACF,MAAD,CAAT,mBAAnB;KAAMO,a;;AAMN,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACMX,QAAQ,CAAC,EAAD,CADd;AAAA,MACzBY,WADyB;AAAA,MACZC,cADY;;AAEhC,MAAMC,EAAE,GAAGR,WAAW,CAAC,UAACS,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AAFgC,qBAGcR,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACJ,IAAjB;AAAA,GAAD,CAHzB;AAAA,MAGxBO,cAHwB,gBAGxBA,cAHwB;AAAA,MAGRC,iBAHQ,gBAGRA,iBAHQ;;AAIhC,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAImB,cAAJ,EAAoB;AAClBL,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACK,cAAD,CAJM,CAAT;AAMA,MAAMG,mBAAmB,GAAGvB,WAAW,CAAC,UAACwB,CAAD,EAAO;AAC7CT,IAAAA,cAAc,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,MAAMC,QAAQ,GAAG3B,WAAW,CAAC,YAAM;AACjCsB,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAElB,mBADC;AAEPmB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEhB,WAAX;AAAwBiB,QAAAA,MAAM,EAAEf,EAAhC;AAAoCgB,QAAAA,MAAM,EAAEnB,IAAI,CAACG;AAAjD;AAFC,KAAD,CAAR;AAID,GAL2B,EAKzB,CAACA,EAAD,EAAKF,WAAL,CALyB,CAA5B;AAOA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEa,QAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,IAAI,EAAE,CAAtB;AAAyB,QAAA,KAAK,EAAEnB,WAAhC;AAA6C,QAAA,QAAQ,EAAES;AAAvD;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC,SAApB;AAA8B,QAAA,QAAQ,EAAC,QAAvC;AAAgD,QAAA,OAAO,EAAEF,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CA/BD;;GAAMT,W;UAEOJ,W,EACmCA,W,EAC7BD,W;;;MAJbK,W;AAiCNA,WAAW,CAACsB,SAAZ,GAAwB;AACtBrB,EAAAA,IAAI,EAAEJ,SAAS,CAAC0B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAexB,WAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Form, Button, Input } from 'antd';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst ButtonWrapper = styled(Button)`\n  position: absolute;\n  right: 0;\n  bottom: -35px;\n`;\n\nconst CommentForm = ({ post }) => {\n  const [commentText, setCommentText] = useState('');\n  const id = useSelector((state) => state.user.me?.id);\n  const { addCommentDone, addCommentLoading } = useSelector((state) => state.post);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(() => {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: { content: commentText, userId: id, postId: post.id },\n    });\n  }, [id, commentText]);\n\n  return (\n    <Form onFinish={onSubmit}>\n      <Form.Item style={{ marginTop: 5 }}>\n        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n        <ButtonWrapper type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>작성하기</ButtonWrapper>\n      </Form.Item>\n    </Form>\n  );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}