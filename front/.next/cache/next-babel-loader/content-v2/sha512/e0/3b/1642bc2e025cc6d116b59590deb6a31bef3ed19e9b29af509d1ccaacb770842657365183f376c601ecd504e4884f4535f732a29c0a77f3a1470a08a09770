{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","reducer","composeWithDevTools","createSagaMiddleware","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","rootSaga","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGF,oBAAoB,EAA3C;AACA,QAAMG,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACXP,OAAO,CAACD,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CADI,GAEXJ,mBAAmB,CAACH,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAFzB;AAGA,QAAME,KAAK,GAAGV,WAAW,CAACG,OAAD,EAAUM,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBC,QAAnB,CAAjB;AACA,SAAOH,KAAP;AACH,CATD;;AAWA,MAAMI,OAAO,GAAGf,aAAa,CAACO,cAAD,EAAiB;AAAES,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n    const enhancer = process.env.NODE_ENV === 'production'\n        ? compose(applyMiddleware(...middlewares))\n        : composeWithDevTools(applyMiddleware(...middlewares));\n    const store = createStore(reducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}