{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { generateDummyAction, LOAD_ACTIONS_FAILURE, LOAD_ACTIONS_REQUEST, LOAD_ACTIONS_SUCCESS, ADD_ACTION_FAILURE, ADD_ACTION_REQUEST, ADD_ACTION_SUCCESS, REMOVE_ACTION_FAILURE, REMOVE_ACTION_REQUEST, REMOVE_ACTION_SUCCESS } from '../reducers/action';\nimport { ADD_ACTION_TO_ME, REMOVE_ACTION_OF_ME } from '../reducers/user';\n\nfunction loadActionsAPI(data) {\n  return axios.get('/actions', data);\n}\n\nfunction* loadActions(action) {\n  try {\n    const result = yield call(loadActionsAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: LOAD_ACTIONS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_ACTIONS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addActionAPI(data) {\n  return axios.post('/action', data);\n}\n\nfunction* addAction(action) {\n  try {\n    const result = yield call(addActionAPI, action.data); // yield delay(1000);\n    // const id = shortId.generate();\n\n    yield put({\n      type: ADD_ACTION_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_ACTION_TO_ME,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_ACTION_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removeActionAPI(data) {\n  return axios.delete(`/action/${data}`);\n}\n\nfunction* removeAction(action) {\n  try {\n    const result = yield call(removeActionAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: REMOVE_ACTION_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_ACTION_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_ACTION_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadActions() {\n  yield throttle(5000, LOAD_ACTIONS_REQUEST, loadActions);\n}\n\nfunction* watchAddAction() {\n  yield takeLatest(ADD_ACTION_REQUEST, addAction);\n}\n\nfunction* watchRemoveAction() {\n  yield takeLatest(REMOVE_ACTION_REQUEST, removeAction);\n}\n\nexport default function* actionSaga() {\n  yield all([fork(watchLoadActions), fork(watchAddAction), fork(watchRemoveAction)]);\n}","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/sagas/action.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","call","generateDummyAction","LOAD_ACTIONS_FAILURE","LOAD_ACTIONS_REQUEST","LOAD_ACTIONS_SUCCESS","ADD_ACTION_FAILURE","ADD_ACTION_REQUEST","ADD_ACTION_SUCCESS","REMOVE_ACTION_FAILURE","REMOVE_ACTION_REQUEST","REMOVE_ACTION_SUCCESS","ADD_ACTION_TO_ME","REMOVE_ACTION_OF_ME","loadActionsAPI","data","get","loadActions","action","result","type","err","console","error","response","addActionAPI","post","addAction","removeActionAPI","delete","removeAction","watchLoadActions","watchAddAction","watchRemoveAction","actionSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport {\n  generateDummyAction,\n  LOAD_ACTIONS_FAILURE,\n  LOAD_ACTIONS_REQUEST,\n  LOAD_ACTIONS_SUCCESS,\n  ADD_ACTION_FAILURE,\n  ADD_ACTION_REQUEST,\n  ADD_ACTION_SUCCESS,\n  REMOVE_ACTION_FAILURE,\n  REMOVE_ACTION_REQUEST,\n  REMOVE_ACTION_SUCCESS,\n} from '../reducers/action';\nimport { ADD_ACTION_TO_ME, REMOVE_ACTION_OF_ME } from '../reducers/user';\n\nfunction loadActionsAPI(data) {\n  return axios.get('/actions', data);\n}\n\nfunction* loadActions(action) {\n  try {\n    const result = yield call(loadActionsAPI, action.data);\n    // yield delay(1000);\n    yield put({\n      type: LOAD_ACTIONS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_ACTIONS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addActionAPI(data) {\n  return axios.post('/action', data);\n}\n\nfunction* addAction(action) {\n  try {\n    const result = yield call(addActionAPI, action.data);\n    // yield delay(1000);\n    // const id = shortId.generate();\n    yield put({\n      type: ADD_ACTION_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_ACTION_TO_ME,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_ACTION_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removeActionAPI(data) {\n  return axios.delete(`/action/${data}`);\n}\n\nfunction* removeAction(action) {\n  try {\n    const result = yield call(removeActionAPI, action.data);\n    // yield delay(1000);\n    yield put({\n      type: REMOVE_ACTION_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: REMOVE_ACTION_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_ACTION_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadActions() {\n  yield throttle(5000, LOAD_ACTIONS_REQUEST, loadActions);\n}\n\nfunction* watchAddAction() {\n  yield takeLatest(ADD_ACTION_REQUEST, addAction);\n}\n\nfunction* watchRemoveAction() {\n  yield takeLatest(REMOVE_ACTION_REQUEST, removeAction);\n}\n\nexport default function* actionSaga() {\n  yield all([\n    fork(watchLoadActions),\n    fork(watchAddAction),\n    fork(watchRemoveAction),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}