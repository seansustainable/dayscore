{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/sagas/post.js"],"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\n\nimport {\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n    return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n    try {\n        // const result = yield call(loadPostsAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10),\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        // const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadPosts),\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}