{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce'; // export const initialState = {\n//     mainPosts: [{\n//         id: 1,\n//         User: {\n//             id: 1,\n//             nickname: 'Sean',\n//         },\n//         content: 'initial post',\n//         Images: [{\n//             src: 'https://img.segye.com/content/image/2019/10/11/20191011508687.jpg',\n//         }, {\n//             src: 'https://t1.daumcdn.net/cfile/tistory/997D23485AF4613635',\n//         }, {\n//             src: 'http://menu.mt.co.kr/moneyweek/thumb/2019/12/04/06/2019120415218066596_1.jpg',\n//         }],\n//         Comments: [{\n//             User: {\n//                 nickname: 'ê¹€ì²¨ì§€',\n//             },\n//             content: 'ë¸”ëž™ ëª¨í‹°ë¸Œë¡œ ì™€~',\n//         }, {\n//             User: {\n//                 nickname: 'ë­‰',\n//             },\n//             content: 'í™§íŒ…! ðŸ˜„',\n//         }]\n//     }],\n//     imagePaths: [],\n//     postAdded: false,\n// };\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'Sean'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Sean'\n  }\n});\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // const dummyPost = {\n//     id: 2,\n//     content: 'dummy post',\n//     User: {\n//         id: 1,\n//         nickname: 'Sean',\n//     },\n//     Images: [],\n//     Comments: [],\n// };\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsError = null;\n      draft.loadPostsDone = false;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostError = null;\n      draft.addPostDone = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostError = null;\n      draft.removePostDone = false;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentError = null;\n      draft.addCommentDone = false;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sean/Projects/dayscore/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","dummyPost","data","dummyComment","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","addPost","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\n\n// export const initialState = {\n//     mainPosts: [{\n//         id: 1,\n//         User: {\n//             id: 1,\n//             nickname: 'Sean',\n//         },\n//         content: 'initial post',\n//         Images: [{\n//             src: 'https://img.segye.com/content/image/2019/10/11/20191011508687.jpg',\n//         }, {\n//             src: 'https://t1.daumcdn.net/cfile/tistory/997D23485AF4613635',\n//         }, {\n//             src: 'http://menu.mt.co.kr/moneyweek/thumb/2019/12/04/06/2019120415218066596_1.jpg',\n//         }],\n//         Comments: [{\n//             User: {\n//                 nickname: 'ê¹€ì²¨ì§€',\n//             },\n//             content: 'ë¸”ëž™ ëª¨í‹°ë¸Œë¡œ ì™€~',\n//         }, {\n//             User: {\n//                 nickname: 'ë­‰',\n//             },\n//             content: 'í™§íŒ…! ðŸ˜„',\n//         }]\n//     }],\n//     imagePaths: [],\n//     postAdded: false,\n// };\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n};\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName(),\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'Sean',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Sean',\n  },\n});\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// const dummyPost = {\n//     id: 2,\n//     content: 'dummy post',\n//     User: {\n//         id: 1,\n//         nickname: 'Sean',\n//     },\n//     Images: [],\n//     Comments: [],\n// };\n\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsError = null;\n      draft.loadPostsDone = false;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostError = null;\n      draft.addPostDone = false;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostError = null;\n      draft.removePostDone = false;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentError = null;\n      draft.addCommentDone = false;\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}